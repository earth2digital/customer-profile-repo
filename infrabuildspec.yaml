Description: >
    This AWS cloudformation template will create necessary infrastructure for the deployment of nodeJS Applications. 
    That would include:
    1. ALB Target Group
    2. ECS Task (Would include the container)
    3. ECS Service
    4. CloudWatch Logs Group
    5. ALB Listener Rule (defines path for routing app/api requests)
    
    SSM would be used as the store for parameters. GitHub repo name would be used to name all the associated entities 
    above.
    
    {envType}-{entityabbreviation}-{GitHubRepoName}
    
    dev-srv-customer-profile-repo: service in dev environment
    dev-srv-customer-profile-repo: task in dev environment
    dev-c-customer-profile-repo: container in dev environment 
    dev-tgrp-customer-profile-repo: Target group in dev environment 
    dev-lgrp-customer-profile-repo: log group in dev environment
    
    NOTE: Trusted entities for role ECSRoleForCF has to have ecs-tasks.amazonaws.com and ecs.amazonaws.com
    
Parameters:

    # The following parameters are set dynamically by AWS CodePipeline. Add more parameters for secrets
    # currently cloudformation doesn't support retrieving parameters of type Secret from SSM
    # At the build step we would be creating application/repo specific parameters. Every appalication 

    ApplicationName:
        Type : String
        Default: "customer-profile-repo"
# docker image URL would be set in the build phase and updated/created as SSM parameter
    DockerImageURL:
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: "/customer-profile-repo/DockerImageURL"
# the environment name would be modified from Codepipeline action using Override Parameter
# values should be
#  dev: development environment
#  test: test environment
#  uat: UAT (Unit Acceptance Testing)
#  prod: production
    EnvironmentType:
        Type: String
        AllowedValues: 
            - dev
            - test
            - uat
            - prod
        Description: This is the environment variable which would be set by the action in the pipeline using functionn overrides
# the environment name would be modified from Codepipeline action using Override Parameter
    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        Default: "vpc-844d8ae3"

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: "2"
# the environment name would be modified from Codepipeline action using Override Parameter
    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String
        Default: "arn:aws:elasticloadbalancing:ap-southeast-2:954147410461:listener/app/ecs-dev-cluster-alb/99d5b75a22649025/975d70460864188b"

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: "/v1/customers*"
        
    AWSCloudSearchDomainEndpoint: 
        Description: The path to register with the Application Load Balancer
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: "/customer-profile-repo/AWSCloudSearchDomainEndpoint"
        
    APIKey: 
        Description: this is the api key used to identify entities accessing the service
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: "/customer-profile-repo/APIKey"

    APISecret: 
        Description: this is the API secret
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: "/customer-profile-repo/APISecret"
        NoEcho: true
        
Resources:
    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Join ["-", [ "ecs", !Ref EnvironmentType, "cluster"]]
            ServiceName: !Join ["-", [ !Ref EnvironmentType, "s", !Ref ApplicationName]]
            Role: "AWSServiceRoleForECS"
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: !Join ["-", [ !Ref EnvironmentType, "c", !Ref ApplicationName]]
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
            DeploymentConfiguration:
                MaximumPercent: 100
                MinimumHealthyPercent: 50
            DesiredCount: 2
            LaunchType: "EC2"
            Role: "ECSRoleForCF"

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ["-", [ !Ref EnvironmentType, "tsk", !Ref ApplicationName]]
            NetworkMode: "bridge"
            Volumes:
                - Host:
                      SourcePath: !Join ["", [ "/opt/", !Ref ApplicationName, "/config"]]
                  Name: "env-config-vol"
            ContainerDefinitions:
                - Name: !Join ["-", [ !Ref EnvironmentType, "c", !Ref ApplicationName]]
                  Essential: true
                  Image: !Ref DockerImageURL
                  Memory: 128
                  Cpu: 0
                  Essential: true
                  PortMappings:
                    - ContainerPort: 8080
                      HostPort: 0
                      Protocol: "tcp"
                  WorkingDirectory: "/opt/app"
                  Environment:
                    - Name : "APIKey" 
                      Value : !Ref APIKey
                    - Name : "APISecret" 
                      Value : !Ref APISecret
                    - Name : "AWSCloudSearchDomainEndpoint" 
                      Value : !Ref AWSCloudSearchDomainEndpoint
                  MountPoints:
                      - SourceVolume: "env-config-vol"
                        ContainerPath: "/home/ubuntu/workspace" 
                        ReadOnly: true
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Join ["-", [ !Ref EnvironmentType, "lgrp", !Ref ApplicationName]]
                        awslogs-region: !Ref AWS::Region

    
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Join ["-", [ !Ref EnvironmentType, "lgrp", !Ref ApplicationName]]
            RetentionInDays: 14

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Join ["-", [ !Ref EnvironmentType, "tgrp", !Ref ApplicationName]]
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /healthcheck
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 3
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
